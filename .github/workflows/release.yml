name: build

on:
  push

jobs:
  test:

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]
 
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}

      - id: cache-venv-linux
        uses: actions/cache@v1
        if: startsWith(runner.os, 'Linux')
        with:
          path: venv
          key: ${{ runner.os }}-venv-v2-${{ hashFiles('setup.py') }}

      - id: cache-venv-macos
        uses: actions/cache@v1
        if: startsWith(runner.os, 'macOS')
        with:
          path: venv
          key: ${{ runner.os }}-venv-v2-${{ hashFiles('setup.py') }}

      - id: cache-venv-windows
        uses: actions/cache@v1
        if: startsWith(runner.os, 'Windows')
        with:
          path: venv
          key: ${{ runner.os }}-venv-v2-${{ hashFiles('setup.py') }}

      - name: set-venv-path
        shell: bash
        run: |
          VENV_ACTIVATE_PATH="venv/bin/activate"
          if [ "${{startsWith(runner.os, 'Windows')}}" == "true" ]; then
            VENV_ACTIVATE_PATH="venv/Scripts/activate"
          fi
          echo "::set-env name=VENV_ACTIVATE_PATH::$VENV_ACTIVATE_PATH"

      - name: create-venv
        if: ${{steps.cache-venv-linux.outputs.cache-hit != 'true' && steps.cache-venv-macos.outputs.cache-hit != 'true' && steps.cache-venv-windows.outputs-cache-hit != 'true'}}
        shell: bash
        run: |
          python -m venv venv
          source $VENV_ACTIVATE_PATH
          pip install -e .[develop,pandas]

      - name: run-tests
        shell: bash
        run: |
         source $VENV_ACTIVATE_PATH
         nosetests --traverse-namespace -s tests/unit

